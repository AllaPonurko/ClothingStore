@{
    ViewData["Title"] = "Shoping Page";
}
<style>
    #mainMenu {
        width: 200px;
        background-color: antiquewhite;
        overflow: auto;
        float: left;
        height: 100%;
    }
    #shopContent {
        
        margin-left: 200px;
        background-color: floralwhite;
        width: auto;
        overflow: auto;
        height: 100%;
    }
</style>
<h1>
    @ViewData["Title"]
</h1>
<nav id="mainMenu" >
    <div >
        <ul id="lstCategory">

        </ul>
        @*<div class="form-group col-md-5">
            <label for="name">List of categories:</label>
            <table class="table table-condensed table-striped  col-md-6">
                <thead><tr><th>    </th></tr></thead>
                <tbody id="category" class="category">
                </tbody>
            </table>
        </div>*@
    </div>
    <div id="filter" >
        <h6>Seach by vendor</h6>
            <p>
                <select id="vendor" name="vendor">
                    <option value=" ">Choose vendor</option>
                </select>
               
            </p>
            <h6>Seach by category</h6>
            <p>
                <select id="category" name="category">
                    <option  value=" ">Choose category</option>
                </select>
            </p>
            <h6>Seach by size</h6>
            <p>
                <select id="size" name="size">
                    <option value=" ">Choose size</option>
                </select>
            </p>
            <input type="submit" id="btnConfirm"  value="Confirm" />
      
    </div>
</nav>
    


<div id="shopContent">
    <form class="lstProducts" enctype="multipart/form-data">
        <div class="form-group col-md-7">
            <table class="table table-condensed table-striped  col-md-8">
                <thead><tr><th>Name</th><th>Price</th><th>Image</th></tr></thead>
                <tbody id="product" class="product">
                </tbody>
            </table>
        </div>
    </form>
</div>
<script>
    /**
     * Отображение ошибки для пользователя
     */
    function renderError(err) {
        console.log(err)
    }
    let categories = []
    /*let lstCategory = document.getElementById("lstCategory")*/
    async function getCategories() {
        await fetch("/api/categories", {
            method: "GET",
            headers: { "Accept": "application/json" }
        }).then(response => { return response.json() })
            .then(data => {
                categories = data;
                renderCategories();
            }).catch(err => {
                console.log(err)
            })
    }

           

        //// если запрос прошел нормально
    //    async function getCategories() {
    //        const response =  await fetch("/api/categories", {
    //            method: "GET",
    //            headers: { "Accept": "application/json" }
    //        });
    //        if (response.ok === true) {
    //            // получаем данные
    //            const categories = await response.json();
    //            let rows = document.getElementById("category");
    //            categories.forEach(category => {
    //                // добавляем полученные элементы в таблицу
    //                rows.append(row(category));
    //            });
    //        }
    //}
    
    let category_id = null
    let size_id = null
    let vendor_id = null
    let vendors = []
    let sizes=[]
    let selectCategory = document.getElementById('category')
    function renderCategories() {
        selectCategory.innerHTML+='';
        categories.map(category => {
            let option = document.createElement('option');
            option.dataset.category_id = category.id;
            option.innerText = category.name;
            option.value = category.name;
            selectCategory.appendChild(option);
            option.onclick = () => {
                category_id = event.target.dataset.category_id
                getSearchProduct()
            }

            
        });
    }
    
        // создание строки для таблицы
        //function row(category) {

        //    const tr = document.createElement("tr");
            

        //    const nameTd = document.createElement("td");
        //    nameTd.append(category.name);
        //    tr.append(nameTd);
        //    tr.onclick = () =>{
        //        category_id = event.target.dataset.category_id
        //        getSearchProduct();
        //    }
                
        //    return tr;
        //}
    
    // Получение данных о продуктах без фильтра
     
    async function getProducts() { 
        const response = await fetch('/api/products', {
            method: "GET",
            headers: { "Accept": "application/json" }
        });
        // если запрос прошел нормально
        if (response.ok === true) {
            // получаем данные
            const products = await response.json();
            /*console.log(products)*/
            let rows = document.getElementById("product");
            products.forEach(product => {
                // добавляем полученные элементы в таблицу
                rows.append(rowProduct(product));
            });
        }
    }
    
    function rowProduct(product) {
       
        const tr = document.createElement("tr");
        const nameTd = document.createElement("td");
        nameTd.append(product.name);
        tr.append(nameTd);
        const priceTd = document.createElement("td");
        priceTd.append(product.price);
        tr.append(priceTd);
        const imgTd = document.createElement("td");
        imgTd.append(product.img);
        tr.append(imgTd);
        return tr;

    }
    
    /**
     * Получение данных о продуктах, в соответствии с фильтром
     */
    async function getSearchProduct() {
        console.log(event.target)
        console.log(event.target.dataset.category_id)

        const response = await fetch(
            '/api/seach/?'
            + 'CategoryId=' + category_id
            + 'SizeId=' + size_id
            + 'VendorId' + vendor_id.join('&'), {
            method: "GET",
                headers: {
                    "Accept": "application/json"
                }
                });
        if (response.ok === true) {
            const products = await response.json();
            let rows = document.getElementById("product");
            rows.innerHTML += '';
            products.forEach(product => {
                // добавляем полученные элементы в таблицу
                rows.append(rowProduct(product));
            });
        }
    }
    let select = document.getElementById('vendor');
    async function getVendors() {
        fetch("/api/vendors",{
            method: "GET",
            headers: { "Accept": "application/json" }
        }).then(res => { return res.json() }).then(data => {
            vendors = data;
            renderVendors();
        }).catch(err => {
            renderError(err)
        })
            
        }
    function renderVendors() {
        select.innerHTML += '';
        vendors.map(vendor => {
            let option = document.createElement('option');
            option.dataset.vendor_id = vendor.id;
            option.innerText = vendor.name;
            option.value = vendor.name;
            select.appendChild(option);
        })
        
    }
    async function getSizes() {
        await fetch('/api/sizes', {
            method: "GET",
            headers: { "Accept": "application/json" }
        }).then(res => { return res.json() })
            .then(data => {
                sizes = data;
                renderSizes()
            }).catch(err => {
                renderError(err)
        })
    }
    let selectSizes = document.getElementById('size')
    function renderSizes() {
        selectSizes.innerHTML += '';
        sizes.map(size => {
            let option = document.createElement('option');
            option.dataset.size_id = size.id;
            option.innerText = size.name;
            option.value = size.name;
            selectSizes.appendChild(option);
        })
    }
    getCategories();
    getProducts();
    getVendors();
    getSizes();
</script>


